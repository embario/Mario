#include <stdio.h>

extern struct rtpkt {
  int sourceid;       /* id of sending router sending this pkt */
  int destid;         /* id of router to which pkt being sent 
                         (must be an immediate neighbor) */
  int mincost[4];    /* min cost to node 0 ... 3 */
  };

//Use this to correctly define the Node ID
int NODEID2 = 2;

extern int TRACE;
extern int YES;
extern int NO;

struct distance_table 
{
  int costs[4][4];
} dt2;


/* students to write the following two routines, and maybe some others */

void rtinit2() 
{
  printf("AT: node2.rtinit2() ... \n");

  //Iterate through Distance Table and initialize values to Infinity (999)!
  int i = 0;
  for (i = 0; i < 4; i++){
    int j = 0;
    for (j = 0; j < 4; j++){
      dt2.costs [i][j] = 999;
    }
  }

  //And Initialize the first neighbor values!
  dt2.costs [0][0] = 3;
  dt2.costs [1][1] = 1;
  dt2.costs [2][2] = 0;
  dt2.costs [3][3] = 2;
  printdt2(&dt2);

}


void rtupdate2(rcvdpkt)
  struct rtpkt *rcvdpkt; 
{

  printf("AT: node2.rtupdate2() ... \n");

  int neighborid = rcvdpkt->sourceid;
  int index = 0;
  int linkCostChange = 0; //Set to FALSE

  //Add in the new information to the respective cells in the distance table.
  dt2.costs [neighborid] [0] = rcvdpkt->mincost [0];
  dt2.costs [neighborid] [1] = rcvdpkt->mincost [1];
  dt2.costs [neighborid] [2] = rcvdpkt->mincost [2];
  dt2.costs [neighborid] [3] = rcvdpkt->mincost [3];

  printdt2(&dt2);

  //Keep track of the minimum link cost for each cell index.
  int minValue = 999;

  //Iterate through the new cells in the distance table
  //Compute the minimum Link cost of each value based on the new information.
  int cellIndex = 0;
  for (cellIndex = 0; cellIndex < 4; cellIndex++){

    //For each cell, compute the minimum cost from this node's adjacent cells.
    int index = 0;
    for (index = 0; index < 4; index++){

      //Compute the Link Cost based upon information from adjacent neighbors.
      int cost = dt2.costs [NODEID2][index] + dt2.costs [index][cellIndex];

      if (cost < minValue)
	minValue = cost; //Set the new minimum, but keep iterating!

    }//end inner loop

    //If we found a smaller value, then replace it and set off the linkCostChange Flag.
    if (minValue < dt2.costs [NODEID2][cellIndex]){

      linkCostChange = 1; //Keep it off; we now know that we need to update our neighbors!
      dt2.costs [NODEID2][cellIndex] = minValue; //Update the cell index with the new (smaller) value.

    }
  }//end outer loop


  //If there was a link cost change...
  if (linkCostChange == 1){

    int firstVal = dt2.costs [NODEID2][0];
    int secondVal = dt2.costs [NODEID2][1];
    int thirdVal = dt2.costs [NODEID2][2];
    int fourthVal = dt2.costs [NODEID2][3];

    printf ("There is a LINK COST CHANGE: Node 2 will send {%d, %d, %d, %d} to Node 0, Node1, and Node 3! \n\n", firstVal, secondVal, thirdVal, fourthVal);

    //Create the Packet that Node 0 will send to its
    //adjacent neighbors with updated link costs.
    struct rtpkt updatePkt;
    updatePkt.sourceid = 2;

    int index = 0;
    for (index = 0; index < 4; index++)
      updatePkt.mincost [index] = dt2.costs[NODEID2][index];

    //To Node 0
    updatePkt.destid = 0;
    tolayer2(updatePkt);

    //To Node 1
    updatePkt.destid = 1;
    tolayer2(updatePkt);

    //To Node 3
    updatePkt.destid = 3;
    tolayer2(updatePkt);
  }

}


printdt2(dtptr)
  struct distance_table *dtptr;
  
{
  printf("CURRENT TABLE FOR NODE[2]: \n\n");
  printf("                via     \n");
  printf("   D2 |    0     1    3 \n");
  printf("  ----|-----------------\n");
  printf("     0|  %3d   %3d   %3d\n",dtptr->costs[0][0],
	 dtptr->costs[0][1],dtptr->costs[0][3]);
  printf("dest 1|  %3d   %3d   %3d\n",dtptr->costs[1][0],
	 dtptr->costs[1][1],dtptr->costs[1][3]);
  printf("     3|  %3d   %3d   %3d\n",dtptr->costs[3][0],
	 dtptr->costs[3][1],dtptr->costs[3][3]);
}






