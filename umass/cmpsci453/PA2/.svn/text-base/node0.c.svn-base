#include <stdio.h>

extern struct rtpkt {
  int sourceid;       /* id of sending router sending this pkt */
  int destid;         /* id of router to which pkt being sent 
                         (must be an immediate neighbor) */
  int mincost[4];    /* min cost to node 0 ... 3 */
};

extern int TRACE;
extern int YES;
extern int NO;

struct distance_table 
{
  int costs[4][4];
} dt0;

//Use this to correctly define the Node ID
int NODEID0 = 0;

/* students to write the following two routines, and maybe some others */

void rtinit0() 
{
  printf("AT: node0.rtinit0() ... \n");

  //Iterate through Distance Table and initialize values to Infinity (999)!
  int i = 0;
  for (i = 0; i < 4; i++){
    int j = 0;
    for (j = 0; j < 4; j++){
      dt0.costs [i][j] = 999;
    }
  }

  //And Initialize the first neighbor values!

  dt0.costs [0][0] = 0;
  dt0.costs [1][1] = 1;
  dt0.costs [2][2] = 3;
  dt0.costs [3][3] = 7;

  //Create the Packet that Node 0 will send to its
  //adjacent neighbors with updated link costs.
  struct rtpkt updatePkt;
  updatePkt.sourceid = 0;

  int index = 0;
  for (index = 0; index < 4; index++)
    updatePkt.mincost [index] = dt0.costs[NODEID0][index];

  //To Node 1
  updatePkt.destid = 1;
  tolayer2(updatePkt);

  //To Node 2
  updatePkt.destid = 2;
  tolayer2(updatePkt);

  //To Node 3
  updatePkt.destid = 3;
  tolayer2(updatePkt);

  //DEBUG
  printf("Node 0 just sent off the packet {0,1,3,7} to Node 1, 2, and 3! \n");
  printdt0(&dt0);

}

void rtupdate0(rcvdpkt)
     struct rtpkt *rcvdpkt;
{

  printf("AT: node0.rtupdate0() ... \n");
  int neighborid = rcvdpkt->sourceid;
  int index = 0;
  int linkCostChange = 0; //Set to FALSE

  //Add in the new information to the respective cells in the distance table.

  dt0.costs [neighborid] [0] = rcvdpkt->mincost [0];
  dt0.costs [neighborid] [1] = rcvdpkt->mincost [1];
  dt0.costs [neighborid] [2] = rcvdpkt->mincost [2];
  dt0.costs [neighborid] [3] = rcvdpkt->mincost [3];

  printdt0(&dt0);

  //Keep track of the minimum link cost for each cell index.
  int minValue = 999;

  //Iterate through the new cells in the distance table
  //Compute the minimum Link cost of each value based on the new information.
  int cellIndex = 0;
  for (cellIndex = 0; cellIndex < 4; cellIndex++){

    //For each cell, compute the minimum cost from this node's adjacent cells.
    int index = 0;
    for (index = 0; index < 4; index++){

      //Compute the Link Cost based upon information from adjacent neighbors.
      int cost = dt0.costs [NODEID0][index] + dt0.costs [index][cellIndex];

      if (cost < minValue)
	minValue = cost; //Set the new minimum, but keep iterating!

    }//end inner loop

    //If we found a smaller value, then replace it and set off the linkCostChange Flag.
    if (minValue < dt0.costs [NODEID0][cellIndex]){

      linkCostChange = 1; //Keep it off; we now know that we need to update our neighbors!
      dt0.costs [NODEID0][cellIndex] = minValue; //Update the cell index with the new (smaller) value.

    }
  }//end outer loop


  //If there was a link cost change...
  if (linkCostChange == 1){

    int firstVal = dt0.costs [NODEID0][0];
    int secondVal = dt0.costs [NODEID0][1];
    int thirdVal = dt0.costs [NODEID0][2];
    int fourthVal = dt0.costs [NODEID0][3];

    printf ("There is a LINK COST CHANGE: Node 3 will send {%d, %d, %d, %d} to Node 1, Node 2, and Node 3! \n\n", firstVal, secondVal, thirdVal, fourthVal);

    //Create the Packet that Node 0 will send to its
    //adjacent neighbors with updated link costs.
    struct rtpkt updatePkt;
    updatePkt.sourceid = 0;

    int index = 0;
    for (index = 0; index < 4; index++)
      updatePkt.mincost [index] = dt0.costs[NODEID0][index];

    //To Node 1
    updatePkt.destid = 1;
    tolayer2(updatePkt);

    //To Node 2
    updatePkt.destid = 2;
    tolayer2(updatePkt);

    //To Node 3
    updatePkt.destid = 3;
    tolayer2(updatePkt);
  }

}


printdt0(dtptr)
struct distance_table *dtptr;
  
{
  printf("CURRENT TABLE FOR NODE[0]: \n\n");
  printf("                via     \n");
  printf("   D0 |    1     2    3 \n");
  printf("  ----|-----------------\n");
  printf("     1|  %3d   %3d   %3d\n",dtptr->costs[1][1],
	 dtptr->costs[1][2],dtptr->costs[1][3]);
  printf("dest 2|  %3d   %3d   %3d\n",dtptr->costs[2][1],
	 dtptr->costs[2][2],dtptr->costs[2][3]);
  printf("     3|  %3d   %3d   %3d\n",dtptr->costs[3][1],
	 dtptr->costs[3][2],dtptr->costs[3][3]);
}

linkhandler0(linkid, newcost)   
int linkid, newcost;

/* called when cost from 0 to linkid changes from current value to newcost*/
/* You can leave this routine empty if you're an undergrad. If you want */
/* to use this routine, you'll need to change the value of the LINKCHANGE */
/* constant definition in prog3.c from 0 to 1 */
	
{
}
