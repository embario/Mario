#include <stdio.h>

extern struct rtpkt {
  int sourceid;       /* id of sending router sending this pkt */
  int destid;         /* id of router to which pkt being sent 
                         (must be an immediate neighbor) */
  int mincost[4];    /* min cost to node 0 ... 3 */
  };

//Use this to correctly define the Node ID
int NODEID3 = 3;

extern int TRACE;
extern int YES;
extern int NO;

struct distance_table 
{
  int costs[4][4];
} dt3;

/* students to write the following two routines, and maybe some others */

void rtinit3() 
{
  printf("AT: node3.rtinit3() ... \n");

  //Iterate through Distance Table and initialize values to Infinity (999)!
  int i = 0;
  for (i = 0; i < 4; i++){
    int j = 0;
    for (j = 0; j < 4; j++){
      dt3.costs [i][j] = 999;
    }
  }

  //And Initialize the first neighbor values!
  dt3.costs [0][0] = 7;
  dt3.costs [2][2] = 2;
  dt3.costs [3][3] = 0;
  printdt3(&dt3);
}


void rtupdate3(rcvdpkt)
  struct rtpkt *rcvdpkt;
{

  printf("AT: node3.rtupdate3() ... \n");
  int neighborid = rcvdpkt->sourceid;
  int index = 0;
  int linkCostChange = 0; //Set to FALSE

  //Add in the new information to the respective cells in the distance table.

  dt3.costs [neighborid] [0] = rcvdpkt->mincost [0];
  dt3.costs [neighborid] [1] = rcvdpkt->mincost [1];
  dt3.costs [neighborid] [2] = rcvdpkt->mincost [2];
  dt3.costs [neighborid] [3] = rcvdpkt->mincost [3];

  printdt3(&dt3);

  //Keep track of the minimum link cost for each cell index.
  int minValue = 999;

  //Iterate through the new cells in the distance table
  //Compute the minimum Link cost of each value based on the new information.
  int cellIndex = 0;
  for (cellIndex = 0; cellIndex < 4; cellIndex++){

    //For each cell, compute the minimum cost from this node's adjacent cells.
    int index = 0;
    for (index = 0; index < 4; index++){

      //Compute the Link Cost based upon information from adjacent neighbors.
      int cost = dt3.costs [NODEID3][index] + dt3.costs [index][cellIndex];
      printf ("Cost at cell index %d, index %d: %d \n", cellIndex, index, cost);

      if (cost < minValue){
	minValue = cost; //Set the new minimum, but keep iterating!
	printf("NEW Minimum is: %d \n", minValue);
      }

    }//end inner loop

    //If we found a smaller value, then replace it and set off the linkCostChange Flag.
    if (minValue < dt3.costs [NODEID3][cellIndex]){

      linkCostChange = 1; //Keep it off; we now know that we need to update our neighbors!
      dt3.costs [NODEID3][cellIndex] = minValue; //Update the cell index with the new (smaller) value.

    }
  }//end outer loop

  //If there was a link cost change...
  if (linkCostChange == 1){

    int firstVal = dt3.costs [NODEID3][0];
    int secondVal = dt3.costs [NODEID3][1];
    int thirdVal = dt3.costs [NODEID3][2];
    int fourthVal = dt3.costs [NODEID3][3];

    printf ("There is a LINK COST CHANGE: Node 3 will send {%d, %d, %d, %d} to Node 0 and Node 2! \n\n", firstVal, secondVal, thirdVal, fourthVal);
    //Create the Packet that Node 0 will send to its
    //adjacent neighbors with updated link costs.
    struct rtpkt updatePkt;
    updatePkt.sourceid = 3;

    int index = 0;
    for (index = 0; index < 4; index++)
      updatePkt.mincost [index] = dt3.costs[NODEID3][index];

    //To Node 0
    updatePkt.destid = 0;
    tolayer2(updatePkt);

    //To Node 2
    updatePkt.destid = 2;
    tolayer2(updatePkt);
  }

}


printdt3(dtptr)
  struct distance_table *dtptr;
  
{
  printf("CURRENT TABLE FOR NODE[3]: \n\n");
  printf("             via     \n");
  printf("   D3 |    0     2 \n");
  printf("  ----|-----------\n");
  printf("     0|  %3d   %3d\n",dtptr->costs[0][0], dtptr->costs[0][2]);
  printf("dest 1|  %3d   %3d\n",dtptr->costs[1][0], dtptr->costs[1][2]);
  printf("     2|  %3d   %3d\n",dtptr->costs[2][0], dtptr->costs[2][2]);

}






