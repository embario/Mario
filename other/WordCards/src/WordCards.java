/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import javax.swing.JOptionPane;

/**
 *
 * @author Mario Barrenechea
 */
public class WordCards extends javax.swing.JFrame {

    enum ShownInBox {

        WORD,
        DEFINITION,
        NONE
    };
    //Important Members
    private int index_ = 0;
    private ArrayList<Word> words_ = null;
    private Random rand_ = null;
    private int numberWords_ = -1;
    private int wordCount_ = 0;
    private Word currentWord_ = null;
    private ShownInBox shownInBox_ = ShownInBox.NONE;

    /** Creates new form WordCards */
    public WordCards() {

        initComponents();
        rand_ = new Random();
        numberWords_ = 250;
        this.words_ = new ArrayList<Word>();

        //Disable Buttons First.
        this.nextButton.setEnabled(false);
        this.previousButton.setEnabled(false);
        this.wordButton.setEnabled(false);
        this.randomButton.setEnabled(false);
        this.definitionButton.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WordCards().setVisible(true);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        wordArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        definitionButton = new javax.swing.JButton();
        wordButton = new javax.swing.JButton();
        randomButton = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        searchBar = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        importXMLOption = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        wordArea.setColumns(20);
        wordArea.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        wordArea.setRows(5);
        wordArea.setText("No Words Yet! Import an XML Doc First.");
        wordArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(wordArea);

        buttonPanel.setBackground(new java.awt.Color(204, 204, 204));

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        definitionButton.setActionCommand("definition");
        definitionButton.setLabel("Definition");
        definitionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                definitionButtonActionPerformed(evt);
            }
        });

        wordButton.setText("Word");
        wordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wordButtonActionPerformed(evt);
            }
        });

        randomButton.setText("Random");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(wordButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(definitionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(randomButton, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buttonPanelLayout.createSequentialGroup()
                        .addComponent(wordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(definitionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(nextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(randomButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        searchPanel.setBackground(new java.awt.Color(204, 204, 204));

        searchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBarActionPerformed(evt);
            }
        });
        searchBar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchBarKeyPressed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchBar, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap(52, Short.MAX_VALUE)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton))
                .addContainerGap())
        );

        jMenu1.setText("File");

        importXMLOption.setText("Import XML File...");
        importXMLOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importXMLOptionMouseClicked(evt);
            }
        });
        importXMLOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importXMLOptionActionPerformed(evt);
            }
        });
        jMenu1.add(importXMLOption);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                    .addComponent(searchPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        index_++;
        if (index_ < words_.size() && index_ >= 0) {
            this.currentWord_ = words_.get(index_);
            if (this.shownInBox_ == ShownInBox.WORD) {
                this.wordArea.setText(this.currentWord_.getName());
            } else if (this.shownInBox_ == ShownInBox.DEFINITION) {
                this.wordArea.setText(this.currentWord_.getDefinition());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No More Words!");
            index_--;
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        int index = -1;
        for (int i = 0; i < words_.size(); i++) {

            Word w = words_.get(i);
            if (w.getName().equalsIgnoreCase(this.searchBar.getText()) == true) {
                index = i;
                break;
            }
        }

        if (index >= 0) {

            this.currentWord_ = words_.get(index);
            this.index_ = index;
            this.wordArea.setText(this.currentWord_.getName());
            this.wordArea.validate();

        } else {
            JOptionPane.showMessageDialog(this, "Word Not Found!");
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void wordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wordButtonActionPerformed
        this.wordArea.setText(this.currentWord_.getName());
        this.shownInBox_ = ShownInBox.WORD;
    }//GEN-LAST:event_wordButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        index_--;
        if (index_ < words_.size() && index_ >= 0) {
            this.currentWord_ = this.words_.get(index_);
            if (this.shownInBox_ == ShownInBox.WORD) {
                this.wordArea.setText(this.currentWord_.getName());
            } else if (this.shownInBox_ == ShownInBox.DEFINITION) {
                this.wordArea.setText(this.currentWord_.getDefinition());
            }
        } else {
            JOptionPane.showMessageDialog(this, "No More Words!");
            index_++;
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed

        int randomIndex = this.rand_.nextInt(this.numberWords_ - 1);
        this.currentWord_ = words_.get(randomIndex);
        if (this.shownInBox_ == ShownInBox.WORD) {
            this.wordArea.setText(this.currentWord_.getName());
        } else if (this.shownInBox_ == ShownInBox.DEFINITION) {
            this.wordArea.setText(this.currentWord_.getDefinition());
        }

        //So we know where we are all the time.
        this.index_ = randomIndex;
    }//GEN-LAST:event_randomButtonActionPerformed

    private void importXMLOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importXMLOptionMouseClicked
    }//GEN-LAST:event_importXMLOptionMouseClicked

    private void importXMLOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importXMLOptionActionPerformed

        this.jFileChooser1.setCurrentDirectory(new File("C:\\"));
        this.jFileChooser1.setDialogTitle("Find XML File with Words and Definitions");
        this.jFileChooser1.addChoosableFileFilter(new XMLfilter());
        this.jFileChooser1.showOpenDialog(this);
        File file = this.jFileChooser1.getSelectedFile();

        try {

            //Parse the XML Document.
            loadWordsFromXML(file);

        } catch (FileNotFoundException fnfe) {
            System.err.print(fnfe);
        }

        //Enable Buttons Now.
        this.nextButton.setEnabled(true);
        this.previousButton.setEnabled(true);
        this.definitionButton.setEnabled(true);
        this.wordButton.setEnabled(true);
        this.randomButton.setEnabled(true);
        this.currentWord_ = words_.get(0);
        this.wordArea.setText(this.currentWord_.getName());
        this.shownInBox_ = ShownInBox.WORD;
    }//GEN-LAST:event_importXMLOptionActionPerformed

    private void definitionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_definitionButtonActionPerformed

        this.wordArea.setText(this.currentWord_.getDefinition());
        this.shownInBox_ = ShownInBox.DEFINITION;
    }//GEN-LAST:event_definitionButtonActionPerformed

    private void searchBarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.searchButtonActionPerformed(null);
        } else {
            this.wordArea.setText("");
        }
    }//GEN-LAST:event_searchBarKeyPressed

    private void searchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchBarActionPerformed

    private void loadWordsFromXML(File file) throws FileNotFoundException {

        Scanner infile = new Scanner(file);
        //We need to add new Word(s).
        Word newWord = new Word();

        try {

            //Add each line to the list.
            while (infile.hasNextLine() == true) {

                String line = infile.nextLine().trim();

                if (line.contains("<word>") || line.contains("</word>")) {
                    continue;
                }

                if (line.contains("<name>") == true) {
                    line = line.replace("<name>", "");
                    line = line.replace("</name>", "");
                    line.trim();
                    newWord.setName(line);

                    this.words_.add(newWord);

                } else if (line.contains("<def>") == true) {

                    line = line.replace("<def>", "");
                    line = line.replace("</def>", "");
                    line.trim();
                    newWord.setDefinition(line);

                    //Reset this variable.
                    newWord = new Word();
                }

            }//end while loop
        } catch (IndexOutOfBoundsException i) {
            System.err.println("Error in MyFlashCards.parseXMLDocument()- " + i + ": Check to make sure that the imported XML document is correctly formatted.");
        }

        infile.close();
    }//end loadWordsFromXML();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton definitionButton;
    private javax.swing.JMenuItem importXMLOption;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton randomButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextArea wordArea;
    private javax.swing.JButton wordButton;
    // End of variables declaration//GEN-END:variables
}
